# SSH Client Configuration File
# This file configures the SSH client behavior for all connections made by the current user.
# It defines global settings and host-specific configurations to enhance security,
# convenience, and functionality of SSH connections.
#
# Purpose:
# - Standardize SSH connection settings across all hosts
# - Enable key management and agent forwarding
# - Configure X11 forwarding for GUI applications
# - Enhance security with strict host key checking
# - Provide consistent user experience
#
# Location: ~/.ssh/config (user-specific) or /etc/ssh/ssh_config (system-wide)
# Permissions: Should be readable only by the owner (600)
#
# Configuration Priority:
# 1. Command-line options
# 2. User configuration file (~/.ssh/config)
# 3. System configuration file (/etc/ssh/ssh_config)
#
# Host Matching:
# - Configurations are applied in order of appearance
# - First matching host pattern is used
# - Use specific hosts before wildcard patterns
#
# Security Considerations:
# - Keep private keys secure and encrypted
# - Use strong authentication methods
# - Regularly rotate SSH keys
# - Monitor SSH agent usage
#
# Documentation: man ssh_config

# ============================================================================
# GLOBAL SETTINGS - Applied to all SSH connections
# ============================================================================
# These settings provide defaults for all hosts unless overridden by specific host blocks

Host *
  # Ignore unknown configuration options to maintain compatibility
  # This allows the config to work across different SSH client versions
  # Note: This directive is typically ignored by older SSH versions
  IgnoreUnknown UseKeychain

  # Automatically add private keys to the SSH agent when first used
  # Reduces the need to manually add keys with ssh-add
  # Options: yes, no, ask, confirm
  AddKeysToAgent yes

  # Enable SSH agent forwarding to remote hosts
  # Allows using local SSH keys for connections from remote hosts
  # WARNING: Only enable for trusted hosts as it can be a security risk
  ForwardAgent yes

  # Enable X11 forwarding for GUI applications
  # Allows running graphical applications on remote hosts with local display
  # Useful for development environments and remote GUI tools
  ForwardX11 yes

  # Trust X11 forwarding and bypass X11 SECURITY extension restrictions
  # Provides full access to the local X11 server from remote applications
  # WARNING: This reduces security - only use with trusted hosts
  ForwardX11Trusted yes

  # Default private key file for authentication
  # Ed25519 keys provide strong security with smaller key sizes
  # This key will be tried for all connections unless overridden
  IdentityFile ~/.ssh/id_ed25519

  # Strict host key checking prevents man-in-the-middle attacks
  # Options: yes (strict), no (disabled), ask (prompt user)
  # 'yes' ensures connecting only to previously known and verified hosts
  StrictHostKeyChecking yes

  # Do not automatically update host keys in known_hosts file
  # This prevents automatic trust of new host keys, enhancing security
  # Use 'yes' to require manual verification of new host keys
  # Use 'no' to allow automatic updates (not recommended)
  # Use 'ask' to prompt user for confirmation before updating
  # Note: This setting is ignored if StrictHostKeyChecking is set to 'no'
  UpdateHostKeys no

  # Use macOS Keychain to store SSH key passphrases (macOS-specific)
  # Integrates with macOS security framework for seamless key management
  # This option is ignored on non-macOS systems
  UseKeychain yes

  # Default username for SSH connections
  # Override this in specific host blocks if different usernames are needed
  User sanselme

  # Location of the known hosts file for host key verification
  # This file stores fingerprints of previously connected hosts
  # Default location - can be customized per user requirements
  UserKnownHostsFile ~/.ssh/known_hosts

# ============================================================================
# HOST-SPECIFIC CONFIGURATIONS (examples - uncomment and modify as needed)
# ============================================================================

# Example: Development server configuration
# Host dev-server
#   HostName dev.example.com
#   Port 2222
#   User developer
#   IdentityFile ~/.ssh/dev_server_key
#   ForwardAgent no  # Disable agent forwarding for security
#   LocalForward 3000 localhost:3000  # Forward local port 3000 to remote

# Example: Production server with jump host
# Host prod-server
#   HostName 10.0.1.100
#   User produser
#   ProxyJump jumphost.example.com
#   IdentityFile ~/.ssh/prod_key
#   StrictHostKeyChecking yes
#   ForwardAgent no

# Example: Jump host configuration
# Host jumphost
#   HostName jumphost.example.com
#   User jumpuser
#   Port 22
#   IdentityFile ~/.ssh/jump_key
#   ControlMaster auto
#   ControlPath ~/.ssh/master-%r@%h:%p
#   ControlPersist 10m

# Example: GitHub configuration
# Host github.com
#   HostName github.com
#   User git
#   IdentityFile ~/.ssh/github_key
#   AddKeysToAgent yes
#   UseKeychain yes

# Example: Internal network pattern
# Host *.internal.company.com
#   User internal-user
#   IdentityFile ~/.ssh/internal_key
#   ProxyCommand ssh -W %h:%p bastion.company.com
#   StrictHostKeyChecking yes

# Example: Docker container SSH (non-standard port)
# Host docker-container
#   HostName localhost
#   Port 2222
#   User container-user
#   StrictHostKeyChecking no  # Containers may have changing keys
#   UserKnownHostsFile /dev/null
#   LogLevel QUIET

# ============================================================================
# ADVANCED CONFIGURATION OPTIONS (commonly used)
# ============================================================================

# Connection multiplexing for improved performance:
# ControlMaster auto
# ControlPath ~/.ssh/master-%r@%h:%p
# ControlPersist 10m

# Compression for slow connections:
# Compression yes

# Keep connections alive:
# ServerAliveInterval 60
# ServerAliveCountMax 3

# Disable host-based authentication:
# HostbasedAuthentication no

# Preferred authentication methods:
# PreferredAuthentications publickey,password

# Connection timeout:
# ConnectTimeout 30

# Local port forwarding examples:
# LocalForward 8080 localhost:80
# LocalForward 5432 db.internal:5432

# Remote port forwarding examples:
# RemoteForward 2222 localhost:22
# RemoteForward 9000 localhost:9000

# Dynamic port forwarding (SOCKS proxy):
# DynamicForward 8080

# ============================================================================
# SECURITY BEST PRACTICES:
# ============================================================================
# 1. Use Ed25519 or RSA keys with at least 2048 bits
# 2. Protect private keys with strong passphrases
# 3. Use SSH agent for key management
# 4. Enable StrictHostKeyChecking for known hosts
# 5. Disable agent forwarding for untrusted hosts
# 6. Use specific host configurations instead of wildcards when possible
# 7. Regularly audit and rotate SSH keys
# 8. Monitor SSH agent usage and loaded keys
# 9. Use jump hosts for accessing internal networks
# 10. Keep SSH client software up to date
