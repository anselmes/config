# SPDX-License-Identifier: GPL-3.0
# Copyright (c) 2025 Schubert Anselme <schubert@anselm.es>

# Kind (Kubernetes in Docker) Cluster Configuration
# This configuration defines a single-node Kubernetes cluster running in Docker containers.
# Kind is primarily used for local development, testing, and CI/CD environments.
#
# Features enabled:
# - Custom CNI support (default CNI disabled for custom networking solutions)
# - Docker socket mounting for Docker-in-Docker scenarios
# - Port forwarding for ingress and custom services
# - User namespace support for enhanced security
#
# Prerequisites:
# - Docker installed and running
# - Kind CLI tool installed
# - Sufficient system resources (2GB+ RAM recommended)
#
# Usage:
#   kind create cluster --config=kind.yaml
#   kubectl cluster-info --context kind-kind

---
# Kind cluster configuration using the v1alpha4 API version
apiVersion: kind.x-k8s.io/v1alpha4
kind: Cluster

# Cluster name (creates context named "kind-<name>")
name: kind

# Network configuration for the cluster
networking:
  # API server bind address - localhost for security
  apiServerAddress: 127.0.0.1

  # API server port - standard Kubernetes API port
  apiServerPort: 6443

  # Disable default CNI to allow custom CNI installation
  # This is useful for testing different CNI solutions like:
  # - Cilium, Calico, Flannel, Weave Net, etc.
  disableDefaultCNI: true

  # IP family configuration - using IPv4 only
  # Options: ipv4, ipv6, dual (for dual-stack)
  ipFamily: ipv4

# Kubernetes feature gates to enable experimental/alpha features
featureGates:
  # Enable user namespace support for improved container isolation
  # This provides additional security by mapping container UIDs/GIDs
  UserNamespacesSupport: true

# Node configuration - defines the cluster topology
nodes:
  # Single control-plane node configuration
  # For multi-node clusters, add additional entries with role: worker
  - role: control-plane

    # Mount host directories/files into the container
    extraMounts:
      # Mount Docker socket for Docker-in-Docker scenarios
      # This allows pods to interact with the host Docker daemon
      # WARNING: This provides privileged access to the host Docker daemon
      - hostPath: /var/run/docker.sock
        containerPath: /var/run/docker.sock

    # Port mappings from container to host
    # These allow external access to services running in the cluster
    extraPortMappings:
      # HTTP traffic port mapping
      # Maps container port 80 to host port 80 for HTTP ingress
      - containerPort: 80
        hostPort: 80
        protocol: TCP
        listenAddress: 0.0.0.0  # Accept connections from any interface

      # HTTPS traffic port mapping
      # Maps container port 443 to host port 443 for HTTPS ingress
      - containerPort: 443
        hostPort: 443
        protocol: TCP
        listenAddress: 0.0.0.0  # Accept connections from any interface

      # Custom service port mapping
      # Maps container port 30443 to host port 30443
      # Commonly used for NodePort services or custom applications
      - containerPort: 30443
        hostPort: 30443
        protocol: TCP
        listenAddress: 0.0.0.0  # Accept connections from any interface

# Additional configuration options (commented examples):
#
# kubeadmConfigPatches:
#   - |
#     kind: InitConfiguration
#     nodeRegistration:
#       kubeletExtraArgs:
#         node-labels: "ingress-ready=true"
#
# containerdConfigPatches:
#   - |-
#     [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:5000"]
#       endpoint = ["http://localhost:5000"]
#
# For multi-node cluster, add worker nodes:
# - role: worker
#   extraPortMappings:
#     - containerPort: 30080
#       hostPort: 30080
